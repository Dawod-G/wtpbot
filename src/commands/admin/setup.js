/**
 * @author Lothaire Guée
 * @description
 *      Contains the command 'setup'.
 *      Allow admin to setup the JSON configuration file.
 */

/*      IMPORTS      */
const { SlashCommandBuilder } = require( "@discordjs/builders" );
const { CommandInteraction } = require( "discord.js" );
const {
    setup, isSetupDone, getSetupData
} = require("../../utils/enmapUtils")
 
 /*      AUTHORISATION      */
const { Setup } = require('../../files/modules.js');
const { loadPermissions } = require('../../events/ready.js');
 
 /* ----------------------------------------------- */
 /* COMMAND BUILD                                   */
 /* ----------------------------------------------- */
 const slashCommand = new SlashCommandBuilder()
    .setName( "setup" )
    .setDescription( "[setup] Setup le bot sur ce serveur." )
    .setDefaultPermission( false )
    .addChannelOption(option =>
        option.setName('discussion_chan')
            .setDescription("Entrez le channel de discussion.")
            .setRequired(true))  
    .addChannelOption(option =>
        option.setName('proposition_chan')
        .setDescription("Entrez le channel de proposition.")
        .setRequired(true))
    .addChannelOption(option =>
        option.setName('presentation_chan')
            .setDescription("Entrez le channel de presentation.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('active_role')
            .setDescription("Entrez le rôle du membre actif.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('certify_role')
            .setDescription("Entrez le rôle du membre certifié.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('ncertify_role')
            .setDescription("Entrez le rôle du membre non certifié.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('demo_role')
            .setDescription("Entrez le rôle du membre démo.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('library_role')
            .setDescription("Entrez le rôle des archives.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('admin_role')
            .setDescription("Entrez le rôle des administrateurs.")
            .setRequired(true))
    .addRoleOption(option =>
        option.setName('mod_role')
            .setDescription("Entrez le rôle des modérateurs.")
            .setRequired(true))

  
 
/* ----------------------------------------------- */
/* PERMISSIONS                                     */
/* ----------------------------------------------- */

async function permissions(guild){
    const ADMIN_ID = await getSetupData(guild, "admin_id")
    const permissions = [
		{
			id: ADMIN_ID,
			type: 'ROLE',
			permission: true,
		},
	];
	return permissions;
}


 /* ----------------------------------------------- */
 /* FUNCTIONS                                       */
 /* ----------------------------------------------- */
 /**
  * Function called when the command 'ping'
  * @param {CommandInteraction} interaction The interaction generated by the command's execution.
  */
  async function execute( interaction ) {
    if(Setup == false) return;
   

    discussionChannel = interaction.options.getChannel('discussion_chan')
    propositionChannel = interaction.options.getChannel('proposition_chan')
    presentationChannel = interaction.options.getChannel('presentation_chan')

    activeMemberRole = interaction.options.getRole('active_role')
    certifyRole = interaction.options.getRole('certify_role')
    ncertifyRole = interaction.options.getRole('ncertify_role')
    demoRole = interaction.options.getRole('demo_role')
    libraryRole = interaction.options.getRole('library_role')
    adminRole = interaction.options.getRole('admin_role')
    modRole = interaction.options.getRole('mod_role')

    setup.set(interaction.guild.id, {
        discussion: discussionChannel.id,
        proposition: propositionChannel.id,
        presentation: presentationChannel.id,
        active_role: activeMemberRole.id,
        certify: certifyRole.id,
        ncertify: ncertifyRole.id,
        demo: demoRole.id,
        library: libraryRole.id,
        admin_id: adminRole.id,
        mod_id: modRole.id
    })
    isSetupDone.set(interaction.guild.id, true)
    loadPermissions(interaction.client)


    await interaction.reply({
        content: `Configuration :
        discussion_chan : \`${discussionChannel.id}\`,
        proposition_chan : \`${propositionChannel.id}\`,
        presentation_chan : \`${presentationChannel.id}\`,\n
        active_role : \`${activeMemberRole.id}\`,
        certify_role : \`${certifyRole.id}\`,
        ncertify_role : \`${ncertifyRole.id}\`,
        demo_role : \`${demoRole.id}\`,
        library_role : \`${libraryRole.id}\`,\n
        admin_role : \`${adminRole.id}\`,
        mod_role : \`${modRole.id}\`,\n
        Votre setup est terminé !
        `,
        ephemeral: true
    });
     
 }
 
 
 /* ----------------------------------------------- */
 /* MODULE EXPORTS                                  */
 /* ----------------------------------------------- */
 module.exports = {
    data: slashCommand,
    permissions,
    execute
 }